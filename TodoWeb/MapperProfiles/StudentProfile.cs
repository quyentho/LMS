using AutoMapper;
using TodoWeb.Application.Dtos.StudentModel;
using TodoWeb.Domains.Entities;
using TodoWeb.Constants.Enums;

namespace TodoWeb.MapperProfiles
{
    public class StudentProfile : Profile
    {
        public StudentProfile()
        {
            // Map StudentCreateViewModel to Student entity
            CreateMap<StudentCreateViewModel, Student>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id will be generated by database
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src => Status.Unverified)) // Default status
                .ForMember(dest => dest.DeleteBy, opt => opt.Ignore())
                .ForMember(dest => dest.DeleteAt, opt => opt.Ignore())
                .ForMember(dest => dest.School, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.CourseStudent, opt => opt.Ignore()); // Navigation property

            // Map Student entity to StudentViewModel
            CreateMap<Student, StudentViewModel>()
                .ForMember(dest => dest.FullName, opt => opt.MapFrom(src => $"{src.FirstName} {src.LastName}"))
                .ForMember(dest => dest.Age, opt => opt.MapFrom(src => CalculateAge(src.DateOfBirth)))
                .ForMember(dest => dest.SchoolName, opt => opt.MapFrom(src => src.School != null ? src.School.Name : ""));

            // Map StudentViewModel to Student entity (for updates)
            CreateMap<StudentViewModel, Student>()
                .ForMember(dest => dest.FirstName, opt => opt.Ignore()) // Handle separately if needed
                .ForMember(dest => dest.LastName, opt => opt.Ignore())  // Handle separately if needed
                .ForMember(dest => dest.DateOfBirth, opt => opt.Ignore()) // Calculate from Age if needed
                .ForMember(dest => dest.School, opt => opt.Ignore())
                .ForMember(dest => dest.CourseStudent, opt => opt.Ignore())
                .ForMember(dest => dest.Status, opt => opt.Ignore())
                .ForMember(dest => dest.DeleteBy, opt => opt.Ignore())
                .ForMember(dest => dest.DeleteAt, opt => opt.Ignore());
        }

        private static int CalculateAge(DateTime dateOfBirth)
        {
            var today = DateTime.Today;
            var age = today.Year - dateOfBirth.Year;
            if (dateOfBirth.Date > today.AddYears(-age))
                age--;
            return age;
        }
    }
}
